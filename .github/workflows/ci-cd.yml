name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  buildAndTest:
    name: CI Pipeline
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test

    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2

      - name: Install Angular dependencies
        run: npm ci

      - name: Run Angular Tests
        run: npm run test:coverage

      - name: Install Express dependencies
        run: npm --prefix ./server ci

      - name: Run Linting
        run: npm --prefix ./server run lint 

    
  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest
    needs: buildAndTest

    env:
      AWS_WEB_APP_NAME: jakedenise-task-listing-app
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: 'Login via AWS CLI'
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: jakedeniseecr
          IMAGE_TAG: ${{ github.sha }}
          
          
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo $REGISTRY
          echo $REPOSITORY
          echo $IMAGE_TAG
          

      - name: 'Deploy to Web App'
        env:
          CONTAINER_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          CONTAINER_REPOSITORY_NAME: jakedeniseecr
          CI_COMMIT_SHA: ${{ github.sha }}
          
        run: |
          chmod +x ./aws/create_dockerrun.sh
          ./aws/create_dockerrun.sh

      - name: 'Upload to Dockerrun.aws.json to S3'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2
        run: |
          aws s3 cp Dockerrun.aws.json s3://jakedenisebucket/Dockerrun.aws.json

      - name: 'Deploy to Elastic Beanstalk'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2
          CI_COMMIT_SHA: ${{ github.sha }}
        run: |
          aws elasticbeanstalk create-application-version --application-name $AWS_WEB_APP_NAME --version-label $CI_COMMIT_SHA --source-bundle S3Bucket=jakedenisebucket,S3Key=Dockerrun.aws.json
          aws elasticbeanstalk update-environment --environment-name $AWS_WEB_APP_NAME-environment --version-label $CI_COMMIT_SHA
